#!/bin/bash
# Copyright (C) 2016 Synthetel Corporation
# Author: Shao Miller <swiftcode@synthetel.com>

function decomp() {
    gunzip -f $CACHE_DIR/$1 || fail Decompressing $1
  }

function fail() {
    say Build failure: $*
    step Log
    popd
    cat $BUILD_DIR/build.log
    exit 1
  }

function fetch() {
    wget -P $CACHE_DIR $URL/$1 2> /dev/null || fail Fetching $1
  }

indent() {
  sed -u 's/^/       /'
}

function paths() {
    cat << EOF
#!/bin/bash
MY_PATH=$1
if [ "\$MY_PATH" == "" ]; then
    MY_PATH=\$(dirname \$(dirname \$(readlink -f \$0)))/.test
  fi
export INCLUDE_PATH=\$MY_PATH/usr/local/include:\$MY_PATH/usr/local/include/x86_64-linux-gnu:\$MY_PATH/usr/include:\$MY_PATH/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH
export LD_LIBRARY_PATH=\$MY_PATH/usr/local/lib:\$MY_PATH/usr/local/lib/x86_64-linux-gnu:\$MY_PATH/usr/lib:\$MY_PATH/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH
export LIBRARY_PATH=\$MY_PATH/usr/local/lib:\$MY_PATH/usr/local/lib/x86_64-linux-gnu:\$MY_PATH/usr/lib:\$MY_PATH/usr/lib/x86_64-linux-gnu:\$LIBRARY_PATH
export PATH=\$MY_PATH/usr/local/bin:\$MY_PATH/usr/local/sbin:\$MY_PATH/usr/bin:\$MY_PATH/usr/sbin:\$PATH
export PKG_CONFIG_PATH=\$MY_PATH/usr/lib/x86_64-linux-gnu/pkgconfig:/app/.apt/usr/lib/x86_64-linux-gnu/:\$PKG_CONFIG_PATH
EOF
  }

function say() {
    echo $* | sed -u 's/^/       /'
  }

function step() {
    echo -----\> $*
  }

function untar() {
    tar -C $CACHE_DIR -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
  }

function untar_rt() {
    tar -C $CACHE_DIR/runtime -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
  }

pushd .

step Checking stack
if [ ! -f /etc/lsb-release ]; then
    fail Sorry, only Ubuntu 14.04 is currently supported
  fi
. /etc/lsb-release
if [ "$DISTRIB_RELEASE" != "14.04" ]; then
    fail Sorry, only Ubuntu 14.04 is currently supported
  fi
say Ok.  Ubuntu 14.04 found

step Setting environment
BUILD_DIR=$1
CACHE_DIR=$2
SCRIPT_VER=3
SWIFT_VER="swift-3.0-preview-1"
say "build_dir: "$BUILD_DIR
say "cache_dir: "$CACHE_DIR
say "script_ver: "$SCRIPT_VER
say "swift_ver: "$SWIFT_VER
say "PATH: "$PATH
say "Include_Path: "$INCLUDE_PATH
say Ok

step Ensuring cache directory
mkdir $CACHE_DIR 2> $BUILD_DIR/build.log
mkdir $CACHE_DIR/runtime 2> $BUILD_DIR/build.log
if [ -d $CACHE_DIR -a -d $CACHE_DIR/runtime ]; then
    true
  else
    fail Creating cache dir
  fi
say Ok

step Generating profile script
mkdir $BUILD_DIR/.profile.d 2> $BUILD_DIR/build.log
if [ -d $BUILD_DIR/.profile.d ]; then
    true
  else
    fail Creating .profile.d dir
  fi
paths /app/.test > $BUILD_DIR/.profile.d/perfect.sh || fail Saving perfect.sh
chmod a+x $BUILD_DIR/.profile.d/perfect.sh || fail chmod perfect.sh
say Ok
say "perfect.sh: "$(cat $BUILD_DIR/.profile.d/perfect.sh)

step Setting paths
. $BUILD_DIR/.profile.d/perfect.sh || fail Executing perfect.sh
say Ok
say "PATH: "$PATH
say "Include_Path: "$INCLUDE_PATH

step Test direct apt install

APT_CACHE_DIR="$CACHE_DIR/test/cache"
APT_STATE_DIR="$CACHE_DIR/test/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
apt-get $APT_OPTIONS update | indent
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall uuid-dev | indent

mkdir -p $BUILD_DIR/.test
say "deb list: "$(ls -1 $APT_CACHE_DIR/archives/*.deb)

#for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
#  say "Installing $(basename $DEB)"
#  dpkg -x $DEB $BUILD_DIR/.test/
#done

say "curr Build_dir: "$BUILD_DIR
GREP_PATH="$BUILD_DIR/.test/usr/lib/x86_64-linux-gnu/pkgconfig/"
say "grep path: "$GREP_PATH
say "apt install files: "$(ls -1 $BUILD_DIR/.test/)
#say "apt pkgconfig files: "$(ls -1 $GREP_PATH)
#step modify pkgconfig files to point to .test directory
#grep -rl "prefix=/usr" $GREP_PATH | xargs sed -i 's|prefix=/usr|prefix=/app/.test/usr|g'

step install swift_ver $SWIFT_VER
    URL=https://swift.org/builds/$SWIFT_VER/ubuntu1404/$SWIFT_VER
    fetch $SWIFT_VER-ubuntu14.04.tar.gz
    decomp $SWIFT_VER-ubuntu14.04.tar.gz
    untar $SWIFT_VER-ubuntu14.04.tar
    rsync -Pa $CACHE_DIR/$SWIFT_VER-ubuntu14.04/ $CACHE_DIR/.test/ > $BUILD_DIR/build.log || fail Renaming Swift dir
    rm -rf $CACHE_DIR/$SWIFT_VER-ubuntu14.04
    say $(ls -1 $CACHE_DIR/.test/)
say Ok

step Install Swift into BuildDir
rsync -Pa $CACHE_DIR/.test/ $BUILD_DIR/.test/ > $BUILD_DIR/build.log || fail Renaming Swift dir
say Ok

#step Install Swift into live dir
#rsync -Pa $CACHE_DIR/.test/ /app/.test/ > $BUILD_DIR/build.log || fail Renaming Swift dir
#say Ok

step Installing apt build dependencies into build environment
rsync -Pa $BUILD_DIR/.test/ /app/.test/ > $BUILD_DIR/build.log || fail rsync
say Ok

#say check uuid.pc file
#say $(cat "/app/.test/usr/lib/x86_64-linux-gnu/pkgconfig/uuid.pc")

step Making application

### Should not need to be in the Sources directory in order to build
# cd $BUILD_DIR/Sources
say "current PkgConfigPath: "$PKG_CONFIG_PATH
say "current PATH: "$PATH
say "swift ver: "$(swift --version)

cd $BUILD_DIR/
swift build > $BUILD_DIR/build.log 2>&1 || fail swift build
#make install > $BUILD_DIR/build.log 2>&1 || fail make install
popd
say Ok

step Installing run-time dependencies into deployment environment
pushd .
rsync -Pa $CACHE_DIR/runtime/.delta/ $BUILD_DIR/.delta/ > $BUILD_DIR/build.log || fail rsync
say Ok

